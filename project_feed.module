<?php
/**
 * @file
 * A short description of your module.
 * 
 * Used to pull data from Github about Backdrop CMS contrib 
 * projects.
 * 
 */



/**
 * Implements hook_config_info().
 */

// @TODO - What does this do?
function project_feed_config_info() {
  $prefixes['project_feed.settings'] = array(
    'label' => t('github API settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */

function project_feed_menu() {
  $items = array();

  $items['admin/config/services/projects/settings'] = array(
    'title' => 'Backdrop Projects',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('project_feed_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Project Feed Configuration.',
    'file' => 'project_feed.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/projects/settings/pull_projects'] = array(
    'title' => 'Pull more projects',
    'description' => 'Create reusable blocks that can be placed in layouts.',
    'page callback' => 'project_feed_code',
    'access arguments' => array('administer blocks'),
  );
  return $items;
}

/**
 * This is the custom code that does the main work of this module.
 * This is triggeed by "pull more projects" menu link (admin)
 */
function project_feed_code() {
  $config = config('project_feed.settings');

  // Putting config settings into variables.
  $pf_user_agent = $config->get('username');
  $pf_github_token = $config->get('github_auth_token');
  $pf_queries_per_pull = $config->get('queries_per_pull');

  // Setting some variables 
  $projects_available = TRUE; // Turns false when all projects have been checked
  $query_counter = 1;         // Counter to limit number of Github requests
  $page_counter = 0;          // Use to keep track of current page of projects
  $projects_added = 0;        // Keeps track of new project nodes
  $debug = 0;                 // Used for debugging


  $project_name = 'project_list.csv';               
  $txt = '';
  $file = file_save_data($txt,'public://' . "test.csv", FILE_EXISTS_REPLACE);
  $txt = fopen('public://test.csv', 'w');

  // This while loop is grabbing batches of project data and checking to see if 
  // nodes already exist
  while($projects_available == TRUE) {
    $page_counter++;

    // Get information about Backdrop Contrib repos 
    // @TODO "queries per pull" should be "projects per query"
    $ch = curl_init('https://api.github.com/orgs/backdrop-contrib/repos?per_page=' . $pf_queries_per_pull . '&page=' . $page_counter);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      'Accept: application/vnd.github.VERSION.raw',
      'User-Agent: ' . $pf_user_agent,
      'Authorization: token ' . $pf_github_token,
    ));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    $response = curl_exec($ch);
    curl_close($ch);
    $repos = json_decode($response, TRUE);

    // Originally used to limit the number of queries during testing
    // May not be necessary in future.
    $query_counter++;

    if (!$repos || $query_counter > 5) {
      $projects_available = FALSE;
    } 

    // Resets the $data array to empty
    // Beginning to build an array of new nodes
    $data = array();

    foreach ($repos as $repo) {
      // Grabs the Gibhub data that want to keep for new node
      $data[$repo['name']] = array(
        'name' => $repo['name'],
        'description' => $repo['description'],
        'stars' => $repo['stargazers_count'],
        'forks' => $repo['forks_count'],
        'default_branch' => $repo['default_branch'],
        'open_issues_count' => $repo['open_issues_count'],
        'updated' => $repo['updated_at'],
        'created' => $repo['pushed_at'],
        'field_home' => $repo['homepage'],
        'field_github' => $repo['svn_url'],
        'releases_url' => $repo['releases_url'],
      );



      // Get information about each project/repo from its .info file.
      $ch = curl_init('https://api.github.com/repos/backdrop-contrib/' . $repo['name'] .'/contents/' . $repo['name'] . '.info');
      curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Accept: application/vnd.github.VERSION.raw',
        'User-Agent: ' . $pf_user_agent,
        'Authorization: token ' . $pf_github_token,
      ));
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
      $response = curl_exec($ch);
      curl_close($ch);
      $info = backdrop_parse_info_format($response);

      if (isset($repo['releases_url'])) {
        $var = $repo['name'];
        $releases = project_feed_check_releases($var);
        $data[$repo['name']]['releases'] = $releases;
      } 

      $query_counter++;

      // Pulls data from .info file into array for new node.
      if (isset($info['name'])) {
        $data[$repo['name']]['title'] = $info['name'];
      } else {
        $data[$repo['name']]['title'] = '';
      }
      if (isset($info['backdrop'])) {
        $data[$repo['name']]['backdrop'] = $info['backdrop'];
      } else {
        $data[$repo['name']]['backdrop'] = '';
      }
      if (isset($info['tags'])) {
        $data[$repo['name']]['tags'] = $info['tags'];
      } else {
        $data[$repo['name']]['tags'] = '';
      }
      if (isset($info['recommends'])) {
        $data[$repo['name']]['tags'] = $info['recommends'];
      } else {
        $data[$repo['name']]['recommends'] = '';
      }
      if (isset($info['screenshot'])) {
        $data[$repo['name']]['screenshot'] = $info['screenshot'];
      } else {
        $data[$repo['name']]['screenshot'] = '';
      }
      if (isset($info['dependencies'])) {
        $data[$repo['name']]['backdrop'] = $info['dependencies'];
      } else {
        $data[$repo['name']]['dependencies'] = '';
      }
      if (isset($info['package'])) {
        $data[$repo['name']]['package'] = $info['package'];
      } else {
        $data[$repo['name']]['package'] = '';
      }
      if (isset($info['configure'])) {
        $data[$repo['name']]['configure'] = $info['configure'];
      } else {
        $data[$repo['name']]['configure'] = '';
      }
      if (isset($info['type'])) {
        $data[$repo['name']]['type_tid'] = $info['type'];
      } else {
        $data[$repo['name']]['type_tid'] = '';
      }
    }

    // Creates nodes for projects that don't have one already
    foreach ($data as $value) { 
      $temp_tag = taxonomy_term_load_multiple_by_name($value['type_tid'], 'project_type');
      $term_tid = array_keys($temp_tag);
      if (isset($term_tid[0])) {
        $field_project_type = $term_tid[0];
      }
      $project = array(
        'title' => $value['title'],
        'machine_name' => $value['name'],
        'field_project_type' => $field_project_type,
        'body' => $value['description'],
        'text_format' => 'filtered_html',
        'backdrop' => $value['backdrop'],
        'screenshot' => $value['screenshot'],
        'field_package' => $value['package'],
        'dependencies' => $value['dependencies'],
        'recommends' => $value['recommends'],
        'field_updated' => strtotime($value['updated']),
        'field_created' => strtotime($value['created']),
        'field_github' => $value['field_github'],
        'tags' => $value['tags'],
        'field_home' => $value['field_home'],
        'field_releases' => $value['releases'],
        'open_issues' => $value['open_issues_count'],
        'forks' => $value['forks'],
      );

      fputcsv($txt, $project);
    }
  }
  fclose($txt);
}

// Check for releases
function project_feed_check_releases($var) {
  $config = config('project_feed.settings');

  // Putting config settings into variables.
  $pf_user_agent = $config->get('username');
  $pf_github_token = $config->get('github_auth_token');
  $pf_queries_per_pull = $config->get('queries_per_pull');

  $ch = curl_init('https://api.github.com/repos/backdrop-contrib/' . $var .'/releases');
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Accept: application/vnd.github.VERSION.raw',
    'User-Agent: ' . $pf_user_agent,
    'Authorization: token ' . $pf_github_token,
  ));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $response = curl_exec($ch);
  curl_close($ch);
  $release_info = json_decode($response, TRUE);

  $var = count($release_info);
  return($var);
}


